#!/usr/bin/env python3
"""
Script de v√©rification de l'installation de Sentinel Voice
V√©rifie que tous les composants sont correctement install√©s et configur√©s
"""

import os
import sys
import json
import subprocess
from pathlib import Path

def check_python_version():
    """V√©rifie la version de Python"""
    print("üêç V√©rification de la version Python...")
    version = sys.version_info
    if version.major >= 3 and version.minor >= 8:
        print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK")
        return True
    else:
        print(f"‚ùå Python {version.major}.{version.minor}.{version.micro} - Version 3.8+ requise")
        return False

def check_dependencies():
    """V√©rifie les d√©pendances Python"""
    print("\nüì¶ V√©rification des d√©pendances Python...")
    required_packages = [
        ('PyQt6', 'PyQt6'),
        ('pygame', 'pygame'),
        ('pyttsx3', 'pyttsx3'),
        ('SpeechRecognition', 'speech_recognition'),
        ('requests', 'requests'),
        ('fuzzywuzzy', 'fuzzywuzzy'),
        ('vosk', 'vosk'),
        ('elevenlabs', 'elevenlabs'),
        ('websockets', 'websockets'),
        ('flask', 'flask'),
        ('flask_socketio', 'flask_socketio')
    ]
    
    missing_packages = []
    for display_name, import_name in required_packages:
        try:
            __import__(import_name)
            print(f"‚úÖ {display_name} - OK")
        except ImportError:
            print(f"‚ùå {display_name} - Manquant")
            missing_packages.append(display_name)
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è  Packages manquants: {', '.join(missing_packages)}")
        print("   Ex√©cutez: pip install -r requirements.txt")
        return False
    return True

def check_files():
    """V√©rifie la pr√©sence des fichiers essentiels"""
    print("\nüìÅ V√©rification des fichiers...")
    required_files = [
        'main.py',
        'requirements.txt',
        'config/voice_config.json',
        'commands.json',
        'web-ui/package.json',
        'web-ui/public/assets/icons/favicon.ico',
        'web-ui/public/assets/icons/sentinel-logo.ico'
    ]
    
    missing_files = []
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path} - OK")
        else:
            print(f"‚ùå {file_path} - Manquant")
            missing_files.append(file_path)
    
    if missing_files:
        print(f"\n‚ö†Ô∏è  Fichiers manquants: {', '.join(missing_files)}")
        return False
    return True

def check_config():
    """V√©rifie la configuration"""
    print("\n‚öôÔ∏è  V√©rification de la configuration...")
    
    # V√©rifier voice_config.json
    try:
        with open('config/voice_config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        if 'tts' in config and 'voices' in config:
            print("‚úÖ config/voice_config.json - OK")
        else:
            print("‚ùå config/voice_config.json - Structure invalide")
            return False
    except Exception as e:
        print(f"‚ùå config/voice_config.json - Erreur: {e}")
        return False
    
    # V√©rifier commands.json
    try:
        with open('commands.json', 'r', encoding='utf-8') as f:
            commands = json.load(f)
        print("‚úÖ commands.json - OK")
    except Exception as e:
        print(f"‚ùå commands.json - Erreur: {e}")
        return False
    
    return True

def check_react_setup():
    """V√©rifie l'installation React"""
    print("\n‚öõÔ∏è  V√©rification de l'installation React...")
    
    web_ui_path = Path('web-ui')
    if not web_ui_path.exists():
        print("‚ùå Dossier web-ui manquant")
        return False
    
    package_json = web_ui_path / 'package.json'
    if not package_json.exists():
        print("‚ùå package.json manquant dans web-ui")
        return False
    
    node_modules = web_ui_path / 'node_modules'
    if not node_modules.exists():
        print("‚ö†Ô∏è  node_modules manquant - Ex√©cutez: cd web-ui && npm install")
        return False
    else:
        print("‚úÖ node_modules - OK")
    
    return True

def check_ports():
    """V√©rifie les ports utilis√©s"""
    print("\nüîå V√©rification des ports...")
    
    try:
        # V√©rifier le port 3000 (React)
        result = subprocess.run(['netstat', '-ano'], capture_output=True, text=True)
        if ':3000' in result.stdout:
            print("‚úÖ Port 3000 (React) - En cours d'utilisation")
        else:
            print("‚ÑπÔ∏è  Port 3000 (React) - Libre")
    except Exception:
        print("‚ö†Ô∏è  Impossible de v√©rifier les ports")
    
    return True

def main():
    """Fonction principale"""
    print("üõ°Ô∏è  V√©rification de l'installation Sentinel Voice")
    print("=" * 50)
    
    checks = [
        check_python_version(),
        check_dependencies(),
        check_files(),
        check_config(),
        check_react_setup(),
        check_ports()
    ]
    
    print("\n" + "=" * 50)
    if all(checks):
        print("üéâ Toutes les v√©rifications sont pass√©es avec succ√®s !")
        print("\nüöÄ Pour d√©marrer l'application:")
        print("   1. Backend Python: python main.py")
        print("   2. Frontend React: cd web-ui && npm start")
        print("\nüìñ Consultez le README.md pour plus d'informations")
    else:
        print("‚ùå Certaines v√©rifications ont √©chou√©")
        print("   Veuillez corriger les probl√®mes avant de continuer")
        sys.exit(1)

if __name__ == "__main__":
    main() 